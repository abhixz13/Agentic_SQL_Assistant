{
  "schema_hash": "01ceed5bb8af9565487010fd9e8a2254",
  "generated_at": "2025-08-19T15:43:56.885955",
  "examples": [
    {
      "id": "example_1",
      "question": "What are the total actual bookings per customer for each year, and which customer had the highest bookings in each year?",
      "thinking_process": [
        "Step 1: Identify the columns needed for aggregation: YEAR, CUSTOMER_NAME, and ACTUAL_BOOKINGS.",
        "Step 2: Use SUM to aggregate actual bookings for each customer per year.",
        "Step 3: Group the results by YEAR and CUSTOMER_NAME.",
        "Step 4: Use a window function to rank customers by their total bookings within each year.",
        "Step 5: Filter the results to get only the top customer per year."
      ],
      "query_breakdown": [
        "1. Select YEAR, CUSTOMER_NAME, and SUM of ACTUAL_BOOKINGS.",
        "2. Group by YEAR and CUSTOMER_NAME.",
        "3. Use a window function to rank customers based on their total bookings.",
        "4. Filter to get the top customer per year."
      ],
      "sql": "WITH RankedBookings AS ( SELECT YEAR, CUSTOMER_NAME, SUM(ACTUAL_BOOKINGS) AS TotalBookings, RANK() OVER (PARTITION BY YEAR ORDER BY SUM(ACTUAL_BOOKINGS) DESC) AS Rank FROM raw_data GROUP BY YEAR, CUSTOMER_NAME ) SELECT YEAR, CUSTOMER_NAME, TotalBookings FROM RankedBookings WHERE Rank = 1 ORDER BY YEAR;",
      "explanation": "This approach uses a Common Table Expression (CTE) to first calculate total bookings and rank customers, allowing us to easily filter for the top customer per year.",
      "complexity": "high",
      "patterns": [
        "aggregate operations",
        "window functions",
        "CTE"
      ]
    },
    {
      "id": "example_2",
      "question": "How do actual bookings vary by fiscal quarter for each customer in the most recent year?",
      "thinking_process": [
        "Step 1: Determine the most recent year from the raw_data table.",
        "Step 2: Filter the data for that year.",
        "Step 3: Group the data by FISCAL_QUARTER_ID and CUSTOMER_NAME.",
        "Step 4: Sum the actual bookings for each group.",
        "Step 5: Order the results by FISCAL_QUARTER_ID."
      ],
      "query_breakdown": [
        "1. Identify the most recent year using a subquery.",
        "2. Filter raw_data for that year.",
        "3. Group by FISCAL_QUARTER_ID and CUSTOMER_NAME.",
        "4. Calculate the sum of ACTUAL_BOOKINGS.",
        "5. Order the results by FISCAL_QUARTER_ID."
      ],
      "sql": "SELECT FISCAL_QUARTER_ID, CUSTOMER_NAME, SUM(ACTUAL_BOOKINGS) AS TotalBookings FROM raw_data WHERE YEAR = (SELECT MAX(YEAR) FROM raw_data) GROUP BY FISCAL_QUARTER_ID, CUSTOMER_NAME ORDER BY FISCAL_QUARTER_ID;",
      "explanation": "This query effectively combines a subquery to find the most recent year with aggregation and grouping to analyze bookings by fiscal quarter, providing insights into seasonal trends.",
      "complexity": "medium",
      "patterns": [
        "subqueries",
        "grouping",
        "filtering"
      ]
    },
    {
      "id": "example_3",
      "question": "What is the average contract duration for customers with the highest total bookings in each vertical market?",
      "thinking_process": [
        "Step 1: Aggregate actual bookings by CUSTOMER_NAME and TOP_VERTICAL_MARKET_NAME.",
        "Step 2: Rank customers within each vertical market based on total bookings.",
        "Step 3: Filter to get the top customer per vertical market.",
        "Step 4: Join this result with the raw_data to get the contract duration for those customers.",
        "Step 5: Calculate the average contract duration."
      ],
      "query_breakdown": [
        "1. Aggregate total bookings by CUSTOMER_NAME and TOP_VERTICAL_MARKET_NAME.",
        "2. Use a window function to rank customers within each vertical market.",
        "3. Filter to get the top customer per vertical market.",
        "4. Join with raw_data to get contract duration.",
        "5. Calculate the average contract duration."
      ],
      "sql": "WITH RankedCustomers AS ( SELECT TOP_VERTICAL_MARKET_NAME, CUSTOMER_NAME, SUM(ACTUAL_BOOKINGS) AS TotalBookings, RANK() OVER (PARTITION BY TOP_VERTICAL_MARKET_NAME ORDER BY SUM(ACTUAL_BOOKINGS) DESC) AS Rank FROM raw_data GROUP BY TOP_VERTICAL_MARKET_NAME, CUSTOMER_NAME ) SELECT AVG(CONTRACT_DURATION) AS AverageContractDuration FROM raw_data r JOIN RankedCustomers rc ON r.CUSTOMER_NAME = rc.CUSTOMER_NAME WHERE rc.Rank = 1 GROUP BY rc.TOP_VERTICAL_MARKET_NAME;",
      "explanation": "This query combines aggregation, ranking, and joining to derive insights about contract durations for top customers in each vertical market, showcasing advanced SQL capabilities.",
      "complexity": "high",
      "patterns": [
        "joins",
        "window functions",
        "aggregations"
      ]
    },
    {
      "id": "example_4",
      "question": "How do actual bookings trend over the years for each customer, and what is the percentage change year-over-year?",
      "thinking_process": [
        "Step 1: Aggregate actual bookings by YEAR and CUSTOMER_NAME.",
        "Step 2: Use a window function to calculate the previous year's bookings for each customer.",
        "Step 3: Calculate the percentage change based on current and previous year bookings.",
        "Step 4: Format the results for better readability."
      ],
      "query_breakdown": [
        "1. Aggregate total bookings by YEAR and CUSTOMER_NAME.",
        "2. Use a window function to get previous year's bookings.",
        "3. Calculate the percentage change.",
        "4. Select and format the final output."
      ],
      "sql": "WITH YearlyBookings AS ( SELECT YEAR, CUSTOMER_NAME, SUM(ACTUAL_BOOKINGS) AS TotalBookings FROM raw_data GROUP BY YEAR, CUSTOMER_NAME ) SELECT YEAR, CUSTOMER_NAME, TotalBookings, LAG(TotalBookings) OVER (PARTITION BY CUSTOMER_NAME ORDER BY YEAR) AS PreviousYearBookings, (TotalBookings - LAG(TotalBookings) OVER (PARTITION BY CUSTOMER_NAME ORDER BY YEAR)) / NULLIF(LAG(TotalBookings) OVER (PARTITION BY CUSTOMER_NAME ORDER BY YEAR), 0) * 100 AS PercentageChange FROM YearlyBookings ORDER BY CUSTOMER_NAME, YEAR;",
      "explanation": "This query uses a CTE to first aggregate bookings and then applies a window function to calculate year-over-year changes, providing a comprehensive view of customer trends over time.",
      "complexity": "high",
      "patterns": [
        "window functions",
        "trend analysis",
        "percentage change"
      ]
    }
  ]
}